#!/usr/bin/env bash

# shellcheck disable=SC2199
# shellcheck source=/dev/null

# SPDX-License-Identifier: MIT
# Copyright (C) 2022 Utsav Balar

# Currently set tip to the current kernel directory
KERNEL_TOP=$(pwd)
KERNEL_CFG=arch/arm64/configs/vendor/xiaomi
OUT_DIR=$KERNEL_TOP/temp
export KERNEL_TOP
export KERNEL_CFG
export OUT_DIR

# Set compiler PATH
PATH=$HOME/gas:$HOME/clang/bin:$PATH

BUILD="make O=$OUT_DIR \
ARCH=arm64 \
LLVM=1 \
CLANG_TRIPLE=aarch64-linux-gnu- \
CROSS_COMPILE=aarch64-linux-gnu- \
-j$(nproc --all)
"
export BUILD

cd "$KERNEL_TOP" || exit

# These values must be changed for forks!
KERNEL_DEFCONFIG_URL="https://github.com/VoidUI-Devices/kernel_xiaomi_sm8250"
KERNEL_DEFCONFIG_HEAD=$(git -C ${KERNEL_CFG} rev-parse HEAD)

SOC="kona"
if [ -n  "$*" ]; then
  case "$1" in
    alioth)
      DEVICE=$1;
    ;;
    apollo)
      DEVICE=$1;
    ;;
    cas)
      DEVICE=$1;
    ;;
    cmi)
      DEVICE=$1;
    ;;
    dagu)
      DEVICE=$1;
    ;;
    elish)
      DEVICE=$1;
    ;;
    enuma)
      DEVICE=$1;
    ;;
    lmi)
      DEVICE=$1;
    ;;
    munch)
      DEVICE=$1;
    ;;
    umi)
      DEVICE=$1;
    ;;
    thyme)
      DEVICE=$1;
    ;;
    psyche)
      DEVICE=$1;
    ;;
  esac

  echo "================================================="
  echo "Your Environment:"
  echo "KERNEL_TOP  : ${KERNEL_TOP}"
  echo "KERNEL_CFG  : ${KERNEL_CFG}"
  echo "OUT_DIR  : ${OUT_DIR}"
  ret=$(rm -rf "${OUT_DIR}" 2>&1);
  ret=$(mkdir -p "${OUT_DIR}" 2>&1);
  if [ ! -d "${OUT_DIR}" ] ; then
    echo "Check your environment";
    echo "ERROR: ${ret}";
    exit 1;
  fi

  echo "================================================="
  echo "SOC -> ${SOC} :: Device -> $1"
  echo "Running scripts/kconfig/merge_config.sh ..."
  ret=$(ARCH=arm64 LLVM=1 scripts/kconfig/merge_config.sh \
    -O "${OUT_DIR}" \
    ${KERNEL_CFG}/../${SOC}-perf_defconfig \
    ${KERNEL_CFG}/sm8250-common.config \
  ${KERNEL_CFG}/"${DEVICE}".config);

  case "$ret" in
    *"error"*|*"ERROR"*|*"Exit"*) echo "ERROR: $ret"; exit 1;;
  esac
  echo "Building new defconfig ..."
  ret=$(${BUILD} savedefconfig 2>&1);
  case "$ret" in
    *"error"*|*"ERROR"*) echo "ERROR: $ret"; exit 1;;
  esac
  mv "$OUT_DIR"/defconfig ./arch/arm64/configs/"$1"_defconfig

read -r -d '' KERNEL_COMMIT_MESSAGE << EOM
ARM64: configs: ${DEVICE}: update auto-generated defconfig for ${DEVICE}
This update is generated automatically by using the update_defconfig script
HEAD of the project used to prepare this commit:
${KERNEL_DEFCONFIG_URL}/tree/${KERNEL_DEFCONFIG_HEAD}
EOM

else

read -r -d '' KERNEL_COMMIT_MESSAGE << EOM
ARM64: configs: xiaomi: update auto-generated defconfig for all devices
This update is generated automatically by using the update_defconfig script
HEAD of the project used to prepare this commit:
${KERNEL_DEFCONFIG_URL}/tree/${KERNEL_DEFCONFIG_HEAD}
EOM

  DEVICES="alioth apollo cas cmi dagu elish enuma lmi munch umi thyme psyche"

  for device in $DEVICES; do \

    case $device in
      alioth)
        DEVICE=$device;
      ;;
      apollo)
        DEVICE=$device;
      ;;
      cas)
        DEVICE=$device;
      ;;
      cmi)
        DEVICE=$device;
      ;;
      dagu)
        DEVICE=$device;
      ;;
      elish)
        DEVICE=$device;
      ;;
      enuma)
        DEVICE=$device;
      ;;
      lmi)
        DEVICE=$device;
      ;;
      munch)
        DEVICE=$device;
      ;;
      umi)
        DEVICE=$device;
      ;;
      thyme)
        DEVICE=$device;
      ;;
      psyche)
        DEVICE=$device;
      ;;
    esac

    echo "================================================="
    echo "Your Environment:"
    echo "KERNEL_TOP  : ${KERNEL_TOP}"
    echo "KERNEL_CFG  : ${KERNEL_CFG}"
    echo "OUT_DIR  : ${OUT_DIR}"
      ret=$(rm -rf "${OUT_DIR}" 2>&1);
      ret=$(mkdir -p "${OUT_DIR}" 2>&1);
      if [ ! -d "${OUT_DIR}" ] ; then
        echo "Check your environment";
        echo "ERROR: ${ret}";
        exit 1;
      fi

      echo "================================================="
      echo "SOC -> ${SOC} :: Device -> $device"
      echo "Running scripts/kconfig/merge_config.sh ..."
      ret=$(ARCH=arm64 LLVM=1 scripts/kconfig/merge_config.sh \
        -O "${OUT_DIR}" \
        ${KERNEL_CFG}/../${SOC}-perf_defconfig \
        ${KERNEL_CFG}/sm8250-common.config \
      ${KERNEL_CFG}/"${DEVICE}".config);

      case "$ret" in
        *"error"*|*"ERROR"*|*"Exit"*) echo "ERROR: $ret"; exit 1;;
      esac
      echo "Building new defconfig ..."
      ret=$(${BUILD} savedefconfig 2>&1);
      case "$ret" in
        *"error"*|*"ERROR"*) echo "ERROR: $ret"; exit 1;;
      esac
      mv "$OUT_DIR"/defconfig ./arch/arm64/configs/"$device"_defconfig
  done
fi

echo "================================================="
echo "Done!"
rm -rf "$OUT_DIR"

echo "You can now commit the updated defconfig with the following as the commit message:"
echo "${KERNEL_COMMIT_MESSAGE}"

unset KERNEL_TOP
unset KERNEL_CFG
unset OUT_DIR
unset BUILD
